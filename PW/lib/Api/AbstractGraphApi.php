<?php

/**
 * PW GRAPH
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 * Extend this class with your controller. You can inject dependencies via class constructor,
 * @see https://github.com/PHP-DI/Slim-Bridge basic example.
 */
namespace OpenAPIServer\Api;

use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractGraphApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractGraphApi
{
    /**
     * POST addCustomGraph
     * Summary: Add a new custom graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addCustomGraph(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing addCustomGraph as a POST method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST addFilterView
     * Summary: Edit graph filter view
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $graphId ID of the node that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addFilterView(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $graphId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $viewIndex = (isset($body['viewIndex'])) ? $body['viewIndex'] : null;
        $targetParameter = (isset($body['targetParameter'])) ? $body['targetParameter'] : null;
        $message = "How about implementing addFilterView as a POST method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT addGraphParameter
     * Summary: Adds a new global parameter to the graph
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $graphId ID of the graph that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addGraphParameter(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $graphId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $name = (isset($body['name'])) ? $body['name'] : null;
        $parameterType = (isset($body['parameterType'])) ? $body['parameterType'] : null;
        $parameterValue = (isset($body['parameterValue'])) ? $body['parameterValue'] : null;
        $message = "How about implementing addGraphParameter as a PUT method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT addTemplateGraph
     * Summary: Add a new template graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addTemplateGraph(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing addTemplateGraph as a PUT method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * DELETE deleteGraph
     * Summary: Deletes a graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $graphId Id of the graph to delete
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteGraph(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $graphId
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('api_key') ? $headers['api_key'] : null;
        $message = "How about implementing deleteGraph as a DELETE method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PATCH editGraphParameter
     * Summary: Updates a global parameter
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $graphId ID of the graph that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function editGraphParameter(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $graphId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $name = (isset($body['name'])) ? $body['name'] : null;
        $parameterValue = (isset($body['parameterValue'])) ? $body['parameterValue'] : null;
        $message = "How about implementing editGraphParameter as a PATCH method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getGraphById
     * Summary: Find graph by ID
     * Notes: Returns a graph network
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $graphId ID of graph to return
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getGraphById(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $graphId
    ): ResponseInterface {
        $message = "How about implementing getGraphById as a GET method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET graphsGet
     * Summary: Show user&#39;s graphs
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function graphsGet(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing graphsGet as a GET method in OpenAPIServer\Api\GraphApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
