<?php

/**
 * PW GRAPH
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 * Extend this class with your controller. You can inject dependencies via class constructor,
 * @see https://github.com/PHP-DI/Slim-Bridge basic example.
 */
namespace OpenAPIServer\Api;

use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractNodeApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractNodeApi
{
    /**
     * POST addCustomNode
     * Summary: Add a custom node to the graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addCustomNode(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing addCustomNode as a POST method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT addNodeParameter
     * Summary: Adds a new parameter to the node
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $nodeId ID of the node that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addNodeParameter(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $nodeId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $name = (isset($body['name'])) ? $body['name'] : null;
        $parameterType = (isset($body['parameterType'])) ? $body['parameterType'] : null;
        $parameterValue = (isset($body['parameterValue'])) ? $body['parameterValue'] : null;
        $message = "How about implementing addNodeParameter as a PUT method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST addNodeTrigger
     * Summary: Add node trigger
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $nodeId ID of the node that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addNodeTrigger(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $nodeId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $triggerIndex = (isset($body['triggerIndex'])) ? $body['triggerIndex'] : null;
        $targetNodeId = (isset($body['targetNodeId'])) ? $body['targetNodeId'] : null;
        $targetParameter = (isset($body['targetParameter'])) ? $body['targetParameter'] : null;
        $triggerType = (isset($body['triggerType'])) ? $body['triggerType'] : null;
        $message = "How about implementing addNodeTrigger as a POST method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT addTemplateNode
     * Summary: Add template node to the graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addTemplateNode(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $message = "How about implementing addTemplateNode as a PUT method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * DELETE deleteNode
     * Summary: Deletes a node
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $nodeId Node ID to delete
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteNode(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $nodeId
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('api_key') ? $headers['api_key'] : null;
        $message = "How about implementing deleteNode as a DELETE method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PATCH editNodeParameter
     * Summary: Updates a node parameter
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $nodeId ID of the node that needs to be updated
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function editNodeParameter(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $nodeId
    ): ResponseInterface {
        $body = $request->getParsedBody();
        $name = (isset($body['name'])) ? $body['name'] : null;
        $parameterValue = (isset($body['parameterValue'])) ? $body['parameterValue'] : null;
        $message = "How about implementing editNodeParameter as a PATCH method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET findNodesByStatus
     * Summary: Finds node by status
     * Notes: Multiple status values can be provided with comma separated strings
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function findNodesByStatus(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $status = (key_exists('status', $queryParams)) ? $queryParams['status'] : null;
        $message = "How about implementing findNodesByStatus as a GET method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getNodeById
     * Summary: Find node by ID
     * Notes: Returns a single node
     * Output-Formats: [application/xml, application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param int $nodeId ID of node to return
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getNodeById(
        ServerRequestInterface $request,
        ResponseInterface $response,
        int $nodeId
    ): ResponseInterface {
        $message = "How about implementing getNodeById as a GET method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET nodesGet
     * Summary: Show nodes in the selected graph
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function nodesGet(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing nodesGet as a GET method in OpenAPIServer\Api\NodeApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
