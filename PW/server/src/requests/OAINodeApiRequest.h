/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINodeApiRequest_H
#define OAI_OAINodeApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAINode.h"
#include <QString>
#include "OAINodeApiHandler.h"

namespace OpenAPI {

class OAINodeApiRequest : public QObject
{
    Q_OBJECT

public:
    OAINodeApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAINodeApiHandler> handler);
    virtual ~OAINodeApiRequest();

    void addCustomNodeRequest();
    void addNodeParameterRequest(const QString& node_id);
    void addNodeTriggerRequest(const QString& node_id);
    void addTemplateNodeRequest();
    void deleteNodeRequest(const QString& node_id);
    void editNodeParameterRequest(const QString& node_id);
    void findNodesByStatusRequest();
    void getNodeByIdRequest(const QString& node_id);
    void nodesGetRequest();
    

    void addCustomNodeResponse();
    void addNodeParameterResponse(const OAINode& res);
    void addNodeTriggerResponse(const OAINode& res);
    void addTemplateNodeResponse();
    void deleteNodeResponse();
    void editNodeParameterResponse(const OAINode& res);
    void findNodesByStatusResponse(const QList<OAINode>& res);
    void getNodeByIdResponse(const OAINode& res);
    void nodesGetResponse();
    

    void addCustomNodeError(QNetworkReply::NetworkError error_type, QString& error_str);
    void addNodeParameterError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void addNodeTriggerError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void addTemplateNodeError(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteNodeError(QNetworkReply::NetworkError error_type, QString& error_str);
    void editNodeParameterError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void findNodesByStatusError(const QList<OAINode>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNodeByIdError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void nodesGetError(QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void addCustomNode(OAINode body);
    void addNodeParameter(qint64 node_id, QString name, QString parameter_type, QString parameter_value);
    void addNodeTrigger(qint64 node_id, QString target_parameter, QString trigger_type, qint64 trigger_index, qint64 target_node_id);
    void addTemplateNode(OAINode body);
    void deleteNode(qint64 node_id, QString api_key);
    void editNodeParameter(qint64 node_id, QString name, QString parameter_value);
    void findNodesByStatus(QList<QString> status);
    void getNodeById(qint64 node_id);
    void nodesGet();
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAINodeApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAINodeApiRequest_H
