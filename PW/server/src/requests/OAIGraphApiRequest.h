/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGraphApiRequest_H
#define OAI_OAIGraphApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIGraph.h"
#include "OAINode.h"
#include <QString>
#include "OAIGraphApiHandler.h"

namespace OpenAPI {

class OAIGraphApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIGraphApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIGraphApiHandler> handler);
    virtual ~OAIGraphApiRequest();

    void addCustomGraphRequest();
    void addFilterViewRequest(const QString& graph_id);
    void addGraphParameterRequest(const QString& graph_id);
    void addTemplateGraphRequest();
    void deleteGraphRequest(const QString& graph_id);
    void editGraphParameterRequest(const QString& graph_id);
    void getGraphByIdRequest(const QString& graph_id);
    void graphsGetRequest();
    

    void addCustomGraphResponse();
    void addFilterViewResponse(const OAINode& res);
    void addGraphParameterResponse(const OAINode& res);
    void addTemplateGraphResponse();
    void deleteGraphResponse();
    void editGraphParameterResponse(const OAINode& res);
    void getGraphByIdResponse(const OAINode& res);
    void graphsGetResponse();
    

    void addCustomGraphError(QNetworkReply::NetworkError error_type, QString& error_str);
    void addFilterViewError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void addGraphParameterError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void addTemplateGraphError(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteGraphError(QNetworkReply::NetworkError error_type, QString& error_str);
    void editGraphParameterError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getGraphByIdError(const OAINode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void graphsGetError(QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void addCustomGraph(OAINode body);
    void addFilterView(qint64 graph_id, qint64 view_index, QString target_parameter);
    void addGraphParameter(qint64 graph_id, QString name, QString parameter_type, QString parameter_value);
    void addTemplateGraph(OAIGraph body);
    void deleteGraph(qint64 graph_id, QString api_key);
    void editGraphParameter(qint64 graph_id, QString name, QString parameter_value);
    void getGraphById(qint64 graph_id);
    void graphsGet();
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIGraphApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIGraphApiRequest_H
