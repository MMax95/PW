/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAINodeApiHandler.h"
#include "OAINodeApiRequest.h"

namespace OpenAPI {

OAINodeApiHandler::OAINodeApiHandler(){

}

OAINodeApiHandler::~OAINodeApiHandler(){

}

void OAINodeApiHandler::addCustomNode(OAINode body) {
    Q_UNUSED(body);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->addCustomNodeResponse();
    }
}
void OAINodeApiHandler::addNodeParameter(qint64 node_id, QString name, QString parameter_type, QString parameter_value) {
    Q_UNUSED(node_id);
    Q_UNUSED(name);
    Q_UNUSED(parameter_type);
    Q_UNUSED(parameter_value);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->addNodeParameterResponse(res);
    }
}
void OAINodeApiHandler::addNodeTrigger(qint64 node_id, QString target_parameter, QString trigger_type, qint64 trigger_index, qint64 target_node_id) {
    Q_UNUSED(node_id);
    Q_UNUSED(target_parameter);
    Q_UNUSED(trigger_type);
    Q_UNUSED(trigger_index);
    Q_UNUSED(target_node_id);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->addNodeTriggerResponse(res);
    }
}
void OAINodeApiHandler::addTemplateNode(OAINode body) {
    Q_UNUSED(body);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->addTemplateNodeResponse();
    }
}
void OAINodeApiHandler::deleteNode(qint64 node_id, QString api_key) {
    Q_UNUSED(node_id);
    Q_UNUSED(api_key);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->deleteNodeResponse();
    }
}
void OAINodeApiHandler::editNodeParameter(qint64 node_id, QString name, QString parameter_value) {
    Q_UNUSED(node_id);
    Q_UNUSED(name);
    Q_UNUSED(parameter_value);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->editNodeParameterResponse(res);
    }
}
void OAINodeApiHandler::findNodesByStatus(QList<QString> status) {
    Q_UNUSED(status);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        QList<OAINode> res;
        reqObj->findNodesByStatusResponse(res);
    }
}
void OAINodeApiHandler::getNodeById(qint64 node_id) {
    Q_UNUSED(node_id);
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->getNodeByIdResponse(res);
    }
}
void OAINodeApiHandler::nodesGet() {
    auto reqObj = qobject_cast<OAINodeApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->nodesGetResponse();
    }
}


}
