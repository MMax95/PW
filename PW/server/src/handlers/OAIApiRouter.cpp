/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIGraphApiRequest.h"
#include "OAIHomepageApiRequest.h"
#include "OAINodeApiRequest.h"
#include "OAIUserApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter() {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){

}

void OAIApiRouter::createApiHandlers() { 
    mOAIGraphApiHandler = QSharedPointer<OAIGraphApiHandler>::create();
    mOAIHomepageApiHandler = QSharedPointer<OAIHomepageApiHandler>::create();
    mOAINodeApiHandler = QSharedPointer<OAINodeApiHandler>::create();
    mOAIUserApiHandler = QSharedPointer<OAIUserApiHandler>::create();
}


void OAIApiRouter::setOAIGraphApiHandler(QSharedPointer<OAIGraphApiHandler> handler){
    mOAIGraphApiHandler = handler;
}
void OAIApiRouter::setOAIHomepageApiHandler(QSharedPointer<OAIHomepageApiHandler> handler){
    mOAIHomepageApiHandler = handler;
}
void OAIApiRouter::setOAINodeApiHandler(QSharedPointer<OAINodeApiHandler> handler){
    mOAINodeApiHandler = handler;
}
void OAIApiRouter::setOAIUserApiHandler(QSharedPointer<OAIUserApiHandler> handler){
    mOAIUserApiHandler = handler;
}

void OAIApiRouter::setUpRoutes() {
    
    Routes.insert(QString("%1 %2").arg("POST").arg("/v2/graphs").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
            reqObj->addCustomGraphRequest();
    });
    Routes.insert(QString("%1 %2").arg("PUT").arg("/v2/graphs").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
            reqObj->addTemplateGraphRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/graphs").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
            reqObj->graphsGetRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIHomepageApiRequest(socket, mOAIHomepageApiHandler);
            reqObj->getHomepageRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/v2/nodes").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
            reqObj->addCustomNodeRequest();
    });
    Routes.insert(QString("%1 %2").arg("PUT").arg("/v2/nodes").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
            reqObj->addTemplateNodeRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/node/findByStatus").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
            reqObj->findNodesByStatusRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/nodes").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
            reqObj->nodesGetRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/v2/user").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
            reqObj->createUserRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/user/login").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
            reqObj->loginUserRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/v2/user/logout").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
            reqObj->logoutUserRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/v2/graphs/{graphId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString graphId = match.captured(QString("graphId").toLower());
                auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
                reqObj->addFilterViewRequest(graphId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/v2/graphs/{graphId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString graphId = match.captured(QString("graphId").toLower());
                auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
                reqObj->addGraphParameterRequest(graphId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/v2/graphs/{graphId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString graphId = match.captured(QString("graphId").toLower());
                auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
                reqObj->deleteGraphRequest(graphId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/v2/graphs/{graphId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString graphId = match.captured(QString("graphId").toLower());
                auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
                reqObj->editGraphParameterRequest(graphId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/v2/graphs/{graphId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString graphId = match.captured(QString("graphId").toLower());
                auto reqObj = new OAIGraphApiRequest(socket, mOAIGraphApiHandler);
                reqObj->getGraphByIdRequest(graphId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/v2/nodes/{nodeId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString nodeId = match.captured(QString("nodeId").toLower());
                auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
                reqObj->addNodeParameterRequest(nodeId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/v2/nodes/{nodeId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString nodeId = match.captured(QString("nodeId").toLower());
                auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
                reqObj->addNodeTriggerRequest(nodeId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/v2/nodes/{nodeId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString nodeId = match.captured(QString("nodeId").toLower());
                auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
                reqObj->deleteNodeRequest(nodeId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/v2/nodes/{nodeId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString nodeId = match.captured(QString("nodeId").toLower());
                auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
                reqObj->editNodeParameterRequest(nodeId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/v2/nodes/{nodeId}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString nodeId = match.captured(QString("nodeId").toLower());
                auto reqObj = new OAINodeApiRequest(socket, mOAINodeApiHandler);
                reqObj->getNodeByIdRequest(nodeId);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/v2/user/{username}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString username = match.captured(QString("username").toLower());
                auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
                reqObj->deleteUserRequest(username);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/v2/user/{username}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString username = match.captured(QString("username").toLower());
                auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
                reqObj->getUserByNameRequest(username);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/v2/user/{username}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString username = match.captured(QString("username").toLower());
                auto reqObj = new OAIUserApiRequest(socket, mOAIUserApiHandler);
                reqObj->updateUserRequest(username);
                return true;
            }
        }
    }
    return false;
}

}
