/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIGraphApiHandler.h"
#include "OAIGraphApiRequest.h"

namespace OpenAPI {

OAIGraphApiHandler::OAIGraphApiHandler(){

}

OAIGraphApiHandler::~OAIGraphApiHandler(){

}

void OAIGraphApiHandler::addCustomGraph(OAINode body) {
    Q_UNUSED(body);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->addCustomGraphResponse();
    }
}
void OAIGraphApiHandler::addFilterView(qint64 graph_id, qint64 view_index, QString target_parameter) {
    Q_UNUSED(graph_id);
    Q_UNUSED(view_index);
    Q_UNUSED(target_parameter);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->addFilterViewResponse(res);
    }
}
void OAIGraphApiHandler::addGraphParameter(qint64 graph_id, QString name, QString parameter_type, QString parameter_value) {
    Q_UNUSED(graph_id);
    Q_UNUSED(name);
    Q_UNUSED(parameter_type);
    Q_UNUSED(parameter_value);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->addGraphParameterResponse(res);
    }
}
void OAIGraphApiHandler::addTemplateGraph(OAIGraph body) {
    Q_UNUSED(body);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->addTemplateGraphResponse();
    }
}
void OAIGraphApiHandler::deleteGraph(qint64 graph_id, QString api_key) {
    Q_UNUSED(graph_id);
    Q_UNUSED(api_key);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->deleteGraphResponse();
    }
}
void OAIGraphApiHandler::editGraphParameter(qint64 graph_id, QString name, QString parameter_value) {
    Q_UNUSED(graph_id);
    Q_UNUSED(name);
    Q_UNUSED(parameter_value);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->editGraphParameterResponse(res);
    }
}
void OAIGraphApiHandler::getGraphById(qint64 graph_id) {
    Q_UNUSED(graph_id);
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        OAINode res;
        reqObj->getGraphByIdResponse(res);
    }
}
void OAIGraphApiHandler::graphsGet() {
    auto reqObj = qobject_cast<OAIGraphApiRequest*>(sender());
    if( reqObj != nullptr )
    {
        
        reqObj->graphsGetResponse();
    }
}


}
