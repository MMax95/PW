/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    this->initializeModel();
}

OAIParameter::~OAIParameter() {}

void OAIParameter::initializeModel() {

    m_parameter_id_isSet = false;
    m_parameter_id_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_parameter_type_isSet = false;
    m_parameter_type_isValid = false;

    m_parameter_value_isSet = false;
    m_parameter_value_isValid = false;
}

void OAIParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameter::fromJsonObject(QJsonObject json) {

    m_parameter_id_isValid = ::OpenAPI::fromJsonValue(parameter_id, json[QString("parameterID")]);
    m_parameter_id_isSet = !json[QString("parameterID")].isNull() && m_parameter_id_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(parameter_name, json[QString("parameterName")]);
    m_parameter_name_isSet = !json[QString("parameterName")].isNull() && m_parameter_name_isValid;

    m_parameter_type_isValid = ::OpenAPI::fromJsonValue(parameter_type, json[QString("parameterType")]);
    m_parameter_type_isSet = !json[QString("parameterType")].isNull() && m_parameter_type_isValid;

    m_parameter_value_isValid = ::OpenAPI::fromJsonValue(parameter_value, json[QString("parameterValue")]);
    m_parameter_value_isSet = !json[QString("parameterValue")].isNull() && m_parameter_value_isValid;
}

QString OAIParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_id_isSet) {
        obj.insert(QString("parameterID"), ::OpenAPI::toJsonValue(parameter_id));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameterName"), ::OpenAPI::toJsonValue(parameter_name));
    }
    if (m_parameter_type_isSet) {
        obj.insert(QString("parameterType"), ::OpenAPI::toJsonValue(parameter_type));
    }
    if (m_parameter_value_isSet) {
        obj.insert(QString("parameterValue"), ::OpenAPI::toJsonValue(parameter_value));
    }
    return obj;
}

qint64 OAIParameter::getParameterId() const {
    return parameter_id;
}
void OAIParameter::setParameterId(const qint64 &parameter_id) {
    this->parameter_id = parameter_id;
    this->m_parameter_id_isSet = true;
}

bool OAIParameter::is_parameter_id_Set() const{
    return m_parameter_id_isSet;
}

bool OAIParameter::is_parameter_id_Valid() const{
    return m_parameter_id_isValid;
}

QString OAIParameter::getParameterName() const {
    return parameter_name;
}
void OAIParameter::setParameterName(const QString &parameter_name) {
    this->parameter_name = parameter_name;
    this->m_parameter_name_isSet = true;
}

bool OAIParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIParameter::getParameterType() const {
    return parameter_type;
}
void OAIParameter::setParameterType(const QString &parameter_type) {
    this->parameter_type = parameter_type;
    this->m_parameter_type_isSet = true;
}

bool OAIParameter::is_parameter_type_Set() const{
    return m_parameter_type_isSet;
}

bool OAIParameter::is_parameter_type_Valid() const{
    return m_parameter_type_isValid;
}

QString OAIParameter::getParameterValue() const {
    return parameter_value;
}
void OAIParameter::setParameterValue(const QString &parameter_value) {
    this->parameter_value = parameter_value;
    this->m_parameter_value_isSet = true;
}

bool OAIParameter::is_parameter_value_Set() const{
    return m_parameter_value_isSet;
}

bool OAIParameter::is_parameter_value_Valid() const{
    return m_parameter_value_isValid;
}

bool OAIParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_id_isValid && m_parameter_type_isValid && true;
}

} // namespace OpenAPI
