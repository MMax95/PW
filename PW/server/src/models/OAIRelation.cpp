/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_relation_id_isSet = false;
    m_relation_id_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_internal_parameters_isSet = false;
    m_internal_parameters_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_relation_id_isValid = ::OpenAPI::fromJsonValue(relation_id, json[QString("relationID")]);
    m_relation_id_isSet = !json[QString("relationID")].isNull() && m_relation_id_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_internal_parameters_isValid = ::OpenAPI::fromJsonValue(internal_parameters, json[QString("internalParameters")]);
    m_internal_parameters_isSet = !json[QString("internalParameters")].isNull() && m_internal_parameters_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_relation_id_isSet) {
        obj.insert(QString("relationID"), ::OpenAPI::toJsonValue(relation_id));
    }
    if (triggers.size() > 0) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(triggers));
    }
    if (actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(actions));
    }
    if (internal_parameters.size() > 0) {
        obj.insert(QString("internalParameters"), ::OpenAPI::toJsonValue(internal_parameters));
    }
    return obj;
}

qint64 OAIRelation::getRelationId() const {
    return relation_id;
}
void OAIRelation::setRelationId(const qint64 &relation_id) {
    this->relation_id = relation_id;
    this->m_relation_id_isSet = true;
}

bool OAIRelation::is_relation_id_Set() const{
    return m_relation_id_isSet;
}

bool OAIRelation::is_relation_id_Valid() const{
    return m_relation_id_isValid;
}

QList<OAITrigger> OAIRelation::getTriggers() const {
    return triggers;
}
void OAIRelation::setTriggers(const QList<OAITrigger> &triggers) {
    this->triggers = triggers;
    this->m_triggers_isSet = true;
}

bool OAIRelation::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIRelation::is_triggers_Valid() const{
    return m_triggers_isValid;
}

QList<OAIAction> OAIRelation::getActions() const {
    return actions;
}
void OAIRelation::setActions(const QList<OAIAction> &actions) {
    this->actions = actions;
    this->m_actions_isSet = true;
}

bool OAIRelation::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIRelation::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<OAIParameter> OAIRelation::getInternalParameters() const {
    return internal_parameters;
}
void OAIRelation::setInternalParameters(const QList<OAIParameter> &internal_parameters) {
    this->internal_parameters = internal_parameters;
    this->m_internal_parameters_isSet = true;
}

bool OAIRelation::is_internal_parameters_Set() const{
    return m_internal_parameters_isSet;
}

bool OAIRelation::is_internal_parameters_Valid() const{
    return m_internal_parameters_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (internal_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_relation_id_isValid && true;
}

} // namespace OpenAPI
