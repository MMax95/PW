/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIView::OAIView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIView::OAIView() {
    this->initializeModel();
}

OAIView::~OAIView() {}

void OAIView::initializeModel() {

    m_view_id_isSet = false;
    m_view_id_isValid = false;

    m_filter_parameters_isSet = false;
    m_filter_parameters_isValid = false;
}

void OAIView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIView::fromJsonObject(QJsonObject json) {

    m_view_id_isValid = ::OpenAPI::fromJsonValue(view_id, json[QString("viewID")]);
    m_view_id_isSet = !json[QString("viewID")].isNull() && m_view_id_isValid;

    m_filter_parameters_isValid = ::OpenAPI::fromJsonValue(filter_parameters, json[QString("filterParameters")]);
    m_filter_parameters_isSet = !json[QString("filterParameters")].isNull() && m_filter_parameters_isValid;
}

QString OAIView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIView::asJsonObject() const {
    QJsonObject obj;
    if (m_view_id_isSet) {
        obj.insert(QString("viewID"), ::OpenAPI::toJsonValue(view_id));
    }
    if (filter_parameters.size() > 0) {
        obj.insert(QString("filterParameters"), ::OpenAPI::toJsonValue(filter_parameters));
    }
    return obj;
}

qint64 OAIView::getViewId() const {
    return view_id;
}
void OAIView::setViewId(const qint64 &view_id) {
    this->view_id = view_id;
    this->m_view_id_isSet = true;
}

bool OAIView::is_view_id_Set() const{
    return m_view_id_isSet;
}

bool OAIView::is_view_id_Valid() const{
    return m_view_id_isValid;
}

QList<OAIParameter> OAIView::getFilterParameters() const {
    return filter_parameters;
}
void OAIView::setFilterParameters(const QList<OAIParameter> &filter_parameters) {
    this->filter_parameters = filter_parameters;
    this->m_filter_parameters_isSet = true;
}

bool OAIView::is_filter_parameters_Set() const{
    return m_filter_parameters_isSet;
}

bool OAIView::is_filter_parameters_Valid() const{
    return m_filter_parameters_isValid;
}

bool OAIView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (filter_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
