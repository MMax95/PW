/**
 * PW GRAPH
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraph.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraph::OAIGraph(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraph::OAIGraph() {
    this->initializeModel();
}

OAIGraph::~OAIGraph() {}

void OAIGraph::initializeModel() {

    m_graph_id_isSet = false;
    m_graph_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_default_view_isSet = false;
    m_default_view_isValid = false;
}

void OAIGraph::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraph::fromJsonObject(QJsonObject json) {

    m_graph_id_isValid = ::OpenAPI::fromJsonValue(graph_id, json[QString("graphID")]);
    m_graph_id_isSet = !json[QString("graphID")].isNull() && m_graph_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_default_view_isValid = ::OpenAPI::fromJsonValue(default_view, json[QString("defaultView")]);
    m_default_view_isSet = !json[QString("defaultView")].isNull() && m_default_view_isValid;
}

QString OAIGraph::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraph::asJsonObject() const {
    QJsonObject obj;
    if (m_graph_id_isSet) {
        obj.insert(QString("graphID"), ::OpenAPI::toJsonValue(graph_id));
    }
    if (parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(parameters));
    }
    if (views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(views));
    }
    if (m_default_view_isSet) {
        obj.insert(QString("defaultView"), ::OpenAPI::toJsonValue(default_view));
    }
    return obj;
}

qint64 OAIGraph::getGraphId() const {
    return graph_id;
}
void OAIGraph::setGraphId(const qint64 &graph_id) {
    this->graph_id = graph_id;
    this->m_graph_id_isSet = true;
}

bool OAIGraph::is_graph_id_Set() const{
    return m_graph_id_isSet;
}

bool OAIGraph::is_graph_id_Valid() const{
    return m_graph_id_isValid;
}

QList<OAIParameter> OAIGraph::getParameters() const {
    return parameters;
}
void OAIGraph::setParameters(const QList<OAIParameter> &parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

bool OAIGraph::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGraph::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIView> OAIGraph::getViews() const {
    return views;
}
void OAIGraph::setViews(const QList<OAIView> &views) {
    this->views = views;
    this->m_views_isSet = true;
}

bool OAIGraph::is_views_Set() const{
    return m_views_isSet;
}

bool OAIGraph::is_views_Valid() const{
    return m_views_isValid;
}

qint64 OAIGraph::getDefaultView() const {
    return default_view;
}
void OAIGraph::setDefaultView(const qint64 &default_view) {
    this->default_view = default_view;
    this->m_default_view_isSet = true;
}

bool OAIGraph::is_default_view_Set() const{
    return m_default_view_isSet;
}

bool OAIGraph::is_default_view_Valid() const{
    return m_default_view_isValid;
}

bool OAIGraph::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_graph_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (views.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraph::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_graph_id_isValid && true;
}

} // namespace OpenAPI
