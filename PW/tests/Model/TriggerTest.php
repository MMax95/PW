<?php

/**
 * PW GRAPH
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is a sample server graph server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\Trigger;

/**
 * TriggerTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\Trigger
 */
class TriggerTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "Trigger"
     */
    public function testTrigger()
    {
        $testTrigger = new Trigger();
        $namespacedClassname = Trigger::getModelsNamespace() . '\\Trigger';
        $this->assertSame('\\' . Trigger::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        $this->markTestIncomplete(
            'Test of "Trigger" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "triggerType"
     */
    public function testPropertyTriggerType()
    {
        $this->markTestIncomplete(
            'Test of "triggerType" property in "Trigger" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "sourceParameterID"
     */
    public function testPropertySourceParameterID()
    {
        $this->markTestIncomplete(
            'Test of "sourceParameterID" property in "Trigger" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "targetParameterID"
     */
    public function testPropertyTargetParameterID()
    {
        $this->markTestIncomplete(
            'Test of "targetParameterID" property in "Trigger" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = Trigger::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}
